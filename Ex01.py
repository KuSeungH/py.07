# ex01.py
# 중간 정리

'''
    - 변수, 자료형
   
   컴퓨터는 메모리에 데이터를 올려두고 CPU가 연산하여 처리하는 구조이다
   메모리에 데이터를 저장해두고 그 공간을 변수라는 형태로 가리켜서 코드에서 활용한다
   어떤 값을 저장하냐에 따라 변수의 크기나 형태가 변할 수 있는데
   이를 구분하기 위해 자료형이라는 개념이 필요하다
   
   서로 다른 자료형의 변수끼리 연산이 가능할 수고 있고, 불가능할 수도 있다 
   문자열과 정수는 덧셈은 안되고, 곱셈은 가능 (파이썬에서만)
   
   - 연산자 
   
   데이터끼리 조합하여 값을 변경하거나 새로운 값을 만들어내기 위한 기호
   in, not in, is, is not
   
   - 제어문 (if, while, for)
   
   프로그램의 흐름을 제어하는 구문, 분기, 반복, 반복중단, 함수종료
   
   - 함수
   
   일정한 기능(function)을 수행하는 코드를 묶은 단위
   매개변수 : 함수를 실행할 때 전달하는 값 (입력값)
   반환값 : 함수 실행이 끝나면 만들어지는 값 (출력값)
   
   - 심화 자료형
    1) 문자열 : 사용자 입력값 혹은 다수의 데이터를  처리하기 위한 가장 기초적인 자료형
    2) 리스트 : 여러 요소를 순서대로 저장할 수 있는 형태
        추가, 수정, 정렬, 삭제 등이 가능하다
    3) 딕션너리 : 리스트가 index로 값(value)를 저장한다면,
        index 대신 key라는 형식의 임의의 값을 이용하여 value를 저장한다
    4) 튜플 : 리스트와 유사하지만 내부 값을 변경할 수 없다
             리스트보다 처리가 빠르다
        
    - 클래스 
    기본 자료형 만으로는 실생활에서 사용되는 개념들을 만들어서 표현하기 힘들다
    실제 생활에서 볼수 있거나, 활용되는 개념들을 객체로 표현하여 코드를 전개하는게 편하다
    클래스는 객체를 생성하기 위한 밑그림이다
    하나의 클래스를 작성해두면, 해당 클래스로 여러 객체를 손쉽게 만들수 있고 
    객체(object)는 여러 속성(변수)과 여러 기능(함수)을 포함하고 있다
   
   * 변수 : 단일 데이터를 저장 
   * 배열(리스트) : 다수의 데이터를 저장
   * 구조체(in C) : 서로 다른 자료형의 변수를 묶어서 처리하는 사용자 정의 자료형
   * 클래스 : 서로 다른 자료형의 변수 +함수를 묶어서 처리하는 사용자 정의 자료형
        
''' 

memberList = ['짱구', '단비', '코난', '지우']
print(memberList[1])

memberDict = {
    '짱구는못말려' : '짱구',
    '아따아따' : '단비',
    '명탐정코난' : '코난',
    '포켓몬스터' : '지우',
}
print(memberDict['명탐정코난'])